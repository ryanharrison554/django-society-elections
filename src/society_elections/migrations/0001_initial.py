# Generated by Django 3.2.7 on 2021-09-28 20:48

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Candidate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=128)),
                ('email', models.EmailField(max_length=254)),
                ('successful', models.BooleanField(default=False, editable=False)),
                ('nominated_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Election',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('admin_title', models.CharField(help_text='Title displayed only in the admin pages, which provides differentiation between e.g. annual elections', max_length=500)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('nominations_start', models.DateTimeField(verbose_name='nominations start time')),
                ('nominations_end', models.DateTimeField(verbose_name='nominations end time')),
                ('voting_start', models.DateTimeField(verbose_name='voting period start time')),
                ('voting_end', models.DateTimeField(verbose_name='voting period end time')),
                ('voter_email_domain_whitelist', models.TextField(blank=True, help_text='Newline-delimited list of email domains to accept when voters sign up to vote in the election', null=True)),
                ('candidate_email_domain_whitelist', models.TextField(help_text='Newline-delimited list of email domains to accept when candidates nominate themselves in the election')),
                ('email_winners', models.BooleanField(default=False)),
                ('email_losers', models.BooleanField(default=False)),
                ('verify_candidate_emails', models.BooleanField(default=False)),
                ('winner_message', models.TextField(blank=True, help_text='The message to send to successful candidates in an election. Format the message by using {name} for the candidate name, {position} for the title of the position, and {votes} for the number of votes they received', null=True)),
                ('loser_message', models.TextField(blank=True, help_text='The message to send to unsuccessful candidates in an election. Format the message by using {name} for the candidate name, {position} for the title of the position, and {votes} for the number of votes they received', null=True)),
                ('candidate_verification_email', models.TextField(blank=True, help_text='The message to send to candidates to verify their email in an election. Format the message by using {name} for the candidate name, {position} for the title of the position, and {verify_url} for the link to verify their email', null=True)),
                ('results_submitted', models.BooleanField(default=False, editable=False)),
                ('results_submitted_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('created_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='elections_created', related_query_name='election_created', to=settings.AUTH_USER_MODEL)),
                ('results_submitted_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='elections_finished', related_query_name='election_finished', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ElectionPosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('candidate_required', models.BooleanField(default=True, help_text='Whether or not at least one candidate is required in order to run this election')),
                ('allow_ron', models.BooleanField(default=True, help_text='Whether or not to include "Re-open Nominations" in the list of options for voters')),
                ('allow_abstain', models.BooleanField(default=True, help_text='Whether or not to allow voters to abstain from voting for this position')),
                ('positions_available', models.PositiveIntegerField(default=1, help_text='Number of available positions for this role')),
                ('election', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='positions', related_query_name='position', to='society_elections.election')),
            ],
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('admin_title', models.CharField(help_text='Long title to give to position in admin pages to differentiate between similar roles that are mutually exclusive in their purpose, e.g. Chair for two different societies', max_length=500)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Voter',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email_salt', models.BinaryField()),
                ('email_hash', models.BinaryField()),
                ('verified', models.BooleanField(default=False, editable=False)),
                ('registered_at', models.DateTimeField(auto_now_add=True)),
                ('verified_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('election', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='voters', related_query_name='voter', to='society_elections.election')),
            ],
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ron', models.BooleanField(default=False, help_text='Vote to re-open the nominations for this position', verbose_name='re-open nominations')),
                ('abstain', models.BooleanField(default=False, help_text='Vote not to submit a vote for any candidate for this position')),
                ('vote_cast_at', models.DateTimeField(auto_now_add=True)),
                ('vote_last_modified_at', models.DateTimeField(auto_now=True)),
                ('candidate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='votes', related_query_name='vote', to='society_elections.candidate')),
                ('position', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='votes', related_query_name='vote', to='society_elections.electionposition')),
                ('voter', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='society_elections.voter')),
            ],
        ),
        migrations.AddField(
            model_name='electionposition',
            name='position',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='society_elections.position'),
        ),
        migrations.AddField(
            model_name='candidate',
            name='position',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='candidates', related_query_name='candidate', to='society_elections.electionposition'),
        ),
    ]
